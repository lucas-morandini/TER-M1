services:
  app:
    build: .
    container_name: ter_m1_backend
    restart: always
    working_dir: /usr/src/app
    depends_on:
      - db
    environment:
      DATABASE_HOST: db
      DATABASE_USER: root_ter_m1
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ter_m1
      DATABASE_PORT: 3306
      MAIL_USER: ter.m1.gl.um@gmail.com
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      LOLESPORTS_API_KEY: ${LOLESPORTS_API_KEY}
      GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      WEBPACK_POLL: 1000
      CHOKIDAR_USEPOLLING: true
      CHOKIDAR_INTERVAL: 1000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/usr/src/app/backend:cached
      - ./commons:/usr/src/app/commons:cached
      - /usr/src/app/commons/node_modules
      - /usr/src/app/node_modules
      - /usr/src/app/backend/node_modules
    networks:
      - my_network
    command: ["/bin/sh", "-c", "cd commons && npx tsc -b && cd ../backend && npm install && npm run migration:run && nodemon -L --watch ."]

  db:
    image: mysql:8.0
    container_name: ter_m1_bdd
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ter_m1
      MYSQL_USER: root_ter_m1
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - my_network
  
  bookmaker-api:
    build:
      context: .
      dockerfile: dockerfile.modelpy
    container_name: ter_m1_model
    restart: always
    working_dir: /usr/src/bookmaker
    ports:
      - "8000:8000"
    volumes:
      - ./bookmaker-model:/usr/src/bookmaker/bookmaker-model
      - /usr/src/bookmaker/bookmaker-model/venv
      - /usr/src/bookmaker/bookmaker-model/__pycache__
    networks:
      - my_network
    command: ["/bin/sh", "-c", "cd bookmaker-model && rm -rf data/dataset_with_recent_performance.csv && rm -rf data/matches_clean.csv && unzip -o temp/data_to_unzip.zip -d data/ && python3 -m venv /venv && pip install -r requirements.txt && fastapi run api"]

volumes:
  db_data:

networks:
  my_network:
    driver: bridge